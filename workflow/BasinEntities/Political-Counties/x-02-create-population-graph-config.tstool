StartLog(LogFile="02-create-population-graph-config.tstool.log")
# Create county population graph configurations
# - this version uses datasets from DOLA website rather than
#   Colorado Information Marketplace, the former is recommended by the State demographer.
# - convert data into time series files for each county,
#   unincorporated county, municipalities, and municipality totals
# - create graph configurations that are used by map popup
# - time series and other files are written directly to the web folder for
#   Political-Counties and also for Municipal-Municipalities (for use later)
#
# Define properties to control processing.
# - use relative paths so that the command file is portable
# - AssetsFolder is where map files exist for the InfoMapper tool
SetProperty(PropertyName="AppFolder",PropertyType=String,PropertyValue="../../../web")
SetProperty(PropertyName="MapsFolder",PropertyType=String,PropertyValue="${AppFolder}/data-maps")
SetProperty(PropertyName="CountiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BasinEntities/Political-Counties")
SetProperty(PropertyName="CountiesTsFolder",PropertyType=String,PropertyValue="${CountiesMapFolder}/ts")
SetProperty(PropertyName="MunicipalitiesMapFolder",PropertyType=String,PropertyValue="${MapsFolder}/BasinEntities/Municipal-Municipalities")
SetProperty(PropertyName="MunicipalitiesTsFolder",PropertyType=String,PropertyValue="${MunicipalitiesMapFolder}/ts")
#
# Set the following to true to write files, false to not write files
# - useful for troubleshooting
#SetProperty(PropertyName="CreateFiles",PropertyType=String,PropertyValue="true")
SetProperty(PropertyName="CreateFiles",PropertyType=String,PropertyValue="false")
#
# Create the output folders for time series
CreateFolder(Folder="${CountiesTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
CreateFolder(Folder="${MunicipalitiesTsFolder}",CreateParentFolders=True,IfFolderExists=Ignore)
#
# Download the counties dataset from OWF, which cross-references FIPS and DOLA identifiers
# - used to iterate through counties
WebGet(URI="https://raw.githubusercontent.com/OpenWaterFoundation/owf-data-co-counties/master/data/Colorado-Counties.csv",LocalFile="downloads/counties-data.csv")
#
# Download the estimated total population data and convert floating point population to integer
# - estimates have total population for county, unincorporated county, and municipalities
# - forecasts have total population for county
WebGet(URI="https://storage.googleapis.com/co-publicdata/county-muni-timeseries.csv",LocalFile="downloads/population-estimate-data.csv")
WebGet(URI="https://drive.google.com/uc?export=download&id=0B-vz6H4k4SESdkNHSng2VGlEc1k",LocalFile="downloads/population-forecast-data.xlsx")
#
# Create a SQLite database to manipulate county data
# - first close the datastore if it is open and delete the database file
# - this will ensure that the create occurs as expected with inserts rather than updates
CloseDataStore(DataStore="CountiesDataStore",StatusMessage="Close previously opened datastore before (re)creating database.",IfNotFound=Ignore)
RemoveFile(InputFile="downloads/counties.db",IfNotFound=Ignore)
NewSQLiteDatabase(DataStore="CountiesDataStore",DatabaseFile="downloads/counties.db")
#
# Read csv files and load tables into the SQLite database
ReadTableFromDelimitedFile(TableID="CountiesCsvTable",InputFile="downloads/counties-data.csv",TextColumns="FIPS_ID,FIPS_wState_ID")
RunSql(DataStore="CountiesDataStore",SqlFile="create-county-table.sqlite")
SetDebugLevel(LogFileLevel=10)
WriteTableToDataStore(TableID="CountiesCsvTable",DataStore="CountiesDataStore",DataStoreTable="County",WriteMode=InsertUpdate)
SetDebugLevel(ScreenLevel=0,LogFileLevel=0)
ReadTableFromDataStore(DataStore="CountiesDataStore",DataStoreTable="County",TableID="CountiesTable")
# Use the following to compare counties tables read from csv nd database
# CompareTables(Table1ID="CountiesCsvTable",Table2ID="CountiesTable",IfDifferent=Warn)
#
# Exit command processing until other logic can be added
Exit()

ReadTableFromDelimitedFile(TableID="county-population-table",InputFile="downloads/population-data.csv",HeaderLines="1",DateTimeColumns="year")
ManipulateTableString(TableID="county-population-table",InputColumn1="totalpopulation",Operator="ToInteger",OutputColumn="totalpopulation2")
ManipulateTableString(TableID="county-population-table",InputColumn1="county",Operator="ToUpperCase",OutputColumn="county")
#
# Get the list of unique counties
CopyTable(TableID="county-population-table",NewTableID="counties-table",IncludeColumns="county",DistinctColumns="county")
SortTable(TableID="counties-table",SortColumns="county")
#
# Loop through the counties and create output for each
For(Name="county",TableID="counties-table",TableColumn="county")
CopyTable(TableID="county-population-table",NewTableID="county-population-${county}",ColumnFilters="county:${county}")
SortTable(TableID="county-population-${county}",SortColumns="year")
TableToTimeSeries(TableID="county-population-${county}",DateTimeColumn="year",LocationColumn="county",ValueColumn="totalpopulation2",DataSource="DOLA",DataType="Population",Interval=Year,Units="persons",Alias="${county}-population")
#
# Copy the time series and fill to make it easier to evaluate trends
Copy(TSID="${county}-population",NewTSID="${county}.DOLA.Population.Year.filled",Alias="${county}-population-filled")
FillInterpolate(TSList=AllMatchingTSID,TSID="${county}-population-filled",MaxIntervals=0)
# Use continue if just want to look at time series in memory.
If(Name="If_CreateFiles1",Condition="${CreateFiles} == true")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county}-population",OutputFile="${TsFolder}/${county}.DOLA.Population.Year.csv",DateTimeColumn="year",ValueColumns="population")
WriteDateValue(TSList=AllMatchingTSID,TSID="${county}-population",OutputFile="${TsFolder}/${county}.DOLA.Population.Year.dv")
WriteDelimitedFile(TSList=AllMatchingTSID,TSID="${county}-population-filled",OutputFile="${TsFolder}/${county}.DOLA.Population.Year.filled.csv",DateTimeColumn="year",ValueColumns="population")
WriteDateValue(TSList=AllMatchingTSID,TSID="${county}-population-filled",OutputFile="${TsFolder}/${county}.DOLA.Population.Year.filled.dv")
EndIf(Name="If_CreateFiles1")
EndFor(Name="county")
#
# Exit if output files are not created.
If(Name="If_CreateFiles2",Condition="${CreateFiles} != true")
Exit()
EndIf(Name="If_CreateFiles2")
#
# Create graph template for use with InfoMapper
# - only need to do this once
# - use Larimer County as the example
ProcessTSProduct(TSProductFile="graphs/county-population-graph-config.tsp",View=True,OutputFile="graphs/county-population-graph-prototype.png",OutputProductFile="graphs/county-population-graph-config-prototype.json",OutputProductFormat="JSON")
#
# Convert the prototype graph into a template by replacing strings with ${Property} notation
# - convert prototype LARIMER to property that can be filled by InfoMapper
TextEdit(InputFile="graphs/county-population-graph-config-prototype.json",SearchFor="LARIMER",ReplaceWith="\$\{featureAttribute:county}",OutputFile="graphs/county-population-graph-config.json")
# Always convert to Linux-like line endings if processing full lines to simplify processing
# - TODO smalers 2020-06-22 this is actually not needed since not replacing entire line
#TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="\r\n",ReplaceWith="\n",OutputFile="graphs/county-population-graph-config.json")
# Edit TSID
# - first part of the string will have been replaced above
# - final step corrects a replace from previous steps
# - uncomment DateValue version when that format is supported
# TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population.Year",ReplaceWith="Population\.Year~DateValue~ts/\$\{featureAttribute:county}\.DOLA\.Population\.Year\.dv",OutputFile="graphs/county-population-graph-config.json")
# TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population.Year.filled",ReplaceWith="Population\.Year\.filled~DateValue~ts/\$\{featureAttribute:county}\.DOLA\.Population\.Year\.filled\.dv",OutputFile="graphs/county-population-graph-config.json")
#TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="dv.filled",ReplaceWith="filled\.dv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population.Year",ReplaceWith="Population\.Year~csv~ts/\$\{featureAttribute:county}\.DOLA\.Population\.Year\.csv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="Population.Year.filled",ReplaceWith="Population\.Year\.filled~csv~ts/\$\{featureAttribute:county}\.DOLA\.Population\.Year\.filled\.csv",OutputFile="graphs/county-population-graph-config.json")
TextEdit(InputFile="graphs/county-population-graph-config.json",SearchFor="csv.filled",ReplaceWith="filled\.csv",OutputFile="graphs/county-population-graph-config.json")
